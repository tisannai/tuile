#!/usr/bin/guile -s
!#

(use-modules (srfi srfi-64))
(use-modules (tuile pr))

(add-to-load-path "..")
(use-modules (tuile bval))


(test-begin "bval")


;; ------------------------------------------------------------
;; bv:

(test-assert "<name>"
  (equal? (bv "12sb1010")
          (bval-new 10 12 #t 'bin)))

(test-assert "<name>"
  (equal? (bv "b1010")
          (bval-new 10 4 #f 'bin)))

(test-assert "<name>"
  (equal? (bv "16shabcd")
          (bval-new -21555 16 #t 'hex)))

(test-assert "<name>"
  (equal? (bv "habcd")
          (bval-new #xabcd 16 #f 'hex)))

(test-assert "<name>"
  (equal? (bv "d100")
          (bval-new 100 8 #t 'dec)))

(test-assert "<name>"
  (equal? (bv "sd100")
          (bval-new 100 8 #t 'dec)))

(test-assert "<name>"
  (equal? (bv "ud100")
          (bval-new 100 7 #f 'dec)))

(test-assert "<name>"
  (equal? (bv "sd-100")
          (bval-new -100 8 #t 'dec)))

(test-assert "<name>"
  (equal? (bv "10d100")
          (bval-new 100 10 #t 'dec)))

(test-assert "<name>"
  (equal? (bv "10sd-100")
          (bval-new -100 10 #t 'dec)))

(test-assert "<name>"
  (equal? (bv "10d-100")
          (bval-new -100 10 #t 'dec)))

(test-assert "<name>"
  (equal? (bv "6s2d1.5625")
          (bval-new 1.5625 (cons 6 2) #t 'dec)))

(test-assert "<name>"
  (equal? (bv "6s2b01.1001")
          (bval-new 1.5625 (cons 6 2) #t 'bin)))


;;(test-assert "<name>"
;;  (equal? (bv "")
;;          (bval-new 10 12 #t 'bin)))

;; bv:
;; ------------------------------------------------------------



;; ------------------------------------------------------------
;; arithmetics:

(test-assert "<name>"
  (equal? (bv* (bv "6s2d1.5625") (bv "6s2d1.5625"))
          (bval-new 2.44140625 (cons 12 4) #t 'dec)))

(test-assert "<name>"
  (equal? (bv+ (bv "6s2d1.5625") (bv "6s2d1.5625"))
          (bval-new 3.125 (cons 7 3) #t 'dec)))

(test-assert "<name>"
  (equal? (bv- (bv "6s2d1.5625") (bv "6s2d1.5625"))
          (bval-new 0.0 (cons 7 3) #t 'dec)))

;; arithmetics:
;; ------------------------------------------------------------



;; ------------------------------------------------------------
;; string conversion:

(test-assert "<name>"
  (string=? (bv->str (bv "12sb1010"))
            "12sb000000001010"))

(test-assert "<name>"
  (string=? (bv->str (bv "b1010"))
            "4ub1010"))

(test-assert "<name>"
  (string=? (bv->str (bv "16shabcd"))
            "16shabcd"))

(test-assert "<name>"
  (string=? (bv->str (bv "habcd"))
            "16uhabcd"))

(test-assert "<name>"
  (string=? (bv->str (bv "d100"))
            "100"))

(test-assert "<name>"
  (string=? (bv->str (bv "sd100"))
            "100"))

(test-assert "<name>"
  (string=? (bv->str (bv "ud100"))
            "100"))

(test-assert "<name>"
  (string=? (bv->str (bv "sd-100"))
            "-100"))

(test-assert "<name>"
  (string=? (bv->str (bv "10d100"))
            "100"))

(test-assert "<name>"
  (string=? (bv->str (bv "10sd-100"))
            "-100"))

(test-assert "<name>"
  (string=? (bv->str (bv "10d-100"))
            "-100"))

(test-assert "<name>"
  (string=? (bv->str (bv "6s2d1.5625"))
            "6s2d1.5625"))

(test-assert "<name>"
  (string=? (bv->str (bv "6s2b01.1001"))
            "6s2b01.1001"))


(test-assert "<name>"
  (string=? (bv->str (bval-new 0.00001 (cons 20 2) #f 'bin))
            "20u2b00.000000000000000011"))

(test-assert "<name>"
  (string=? (bv->str (bval-new 0.00001 (cons 20 0) #f 'bin))
            "20u0b*.00000000000000001010"))

(test-assert "<name>"
  (string=? (bv->str (bval-new 0.00001 (cons 20 -2) #f 'bin))
            "20u-2b*.**00000000000000101010"))

(test-assert "<name>"
  (string=? (bv->str (bval-new 0.00001 (cons 20 2) #t 'bin))
            "20s2b00.000000000000000011"))

(test-assert "<name>"
  (string=? (bv->str (bval-new 0.00001 (cons 20 0) #t 'bin))
            "20s0b+.00000000000000001010"))

(test-assert "<name>"
  (string=? (bv->str (bval-new 0.00001 (cons 20 -2) #t 'bin))
            "20s-2b+.++00000000000000101010"))

(test-assert "<name>"
  (string=? (bv->str (bval-new -0.00001 (cons 20 2) #t 'bin))
            "20s2b11.111111111111111101"))

(test-assert "<name>"
  (string=? (bv->str (bval-new -0.00001 (cons 20 0) #t 'bin))
            "20s0b-.11111111111111110110"))

(test-assert "<name>"
  (string=? (bv->str (bval-new -0.00001 (cons 20 -2) #t 'bin))
            "20s-2b-.--11111111111111010110"))

;; string conversion:
;; ------------------------------------------------------------


;; ------------------------------------------------------------
;; arithmetic shift left:

(test-assert "<name>"
  (equal? (bv<<< (bv "6u2b00.0010") 0)
          (bval-new 0.125 (cons 6 2) #f 'bin)))

(test-assert "<name>"
  (equal? (bv<<< (bv "6u2b00.0010") 1)
          (bval-new 0.25 (cons 6 2) #f 'bin)))

(test-assert "<name>"
  (equal? (bv<<< (bv "6u2b00.0010") 2)
          (bval-new 0.5 (cons 6 2) #f 'bin)))

(test-assert "<name>"
  (equal? (bv<<< (bv "6u2b00.0010") 3)
          (bval-new 1.0 (cons 6 2) #f 'bin)))

(test-assert "<name>"
  (equal? (bv<<< (bv "6u2b00.0010") 4)
          (bval-new 2.0 (cons 6 2) #f 'bin)))

(test-assert "<name>"
  (equal? (bv<<< (bv "6u2b00.0010") 5)
          (bval-new 3.9375 (cons 6 2) #f 'bin)))

(test-assert "<name>"
  (equal? (bv<<< (bv "6u2b00.0010") 6)
          (bval-new 3.9375 (cons 6 2) #f 'bin)))

(test-assert "<name>"
  (equal? (bv<<< (bv "6s2b00.0010") 0)
          (bval-new 0.125 (cons 6 2) #t 'bin)))

(test-assert "<name>"
  (equal? (bv<<< (bv "6s2b00.0010") 1)
          (bval-new 0.25 (cons 6 2) #t 'bin)))

(test-assert "<name>"
  (equal? (bv<<< (bv "6s2b00.0010") 2)
          (bval-new 0.5 (cons 6 2) #t 'bin)))

(test-assert "<name>"
  (equal? (bv<<< (bv "6s2b00.0010") 3)
          (bval-new 1.0 (cons 6 2) #t 'bin)))

(test-assert "<name>"
  (equal? (bv<<< (bv "6s2b00.0010") 4)
          (bval-new 1.9375 (cons 6 2) #t 'bin)))

(test-assert "<name>"
  (equal? (bv<<< (bv "6s2b00.0010") 5)
          (bval-new 1.9375 (cons 6 2) #t 'bin)))

(test-assert "<name>"
  (equal? (bv<<< (bv "5ud3") 0)
          (bval-new 3 5 #f 'dec)))

(test-assert "<name>"
  (equal? (bv<<< (bv "5ud3") 1)
          (bval-new 6 5 #f 'dec)))

(test-assert "<name>"
  (equal? (bv<<< (bv "5ud3") 2)
          (bval-new 12 5 #f 'dec)))

(test-assert "<name>"
  (equal? (bv<<< (bv "5ud3") 3)
          (bval-new 24 5 #f 'dec)))

(test-assert "<name>"
  (equal? (bv<<< (bv "5ud3") 4)
          (bval-new 31 5 #f 'dec)))

(test-assert "<name>"
  (equal? (bv<<< (bv "5ud3") 5)
          (bval-new 31 5 #f 'dec)))

(test-assert "<name>"
  (equal? (bv<<< (bv "5sd3") 0)
          (bval-new 3 5 #t 'dec)))

(test-assert "<name>"
  (equal? (bv<<< (bv "5sd3") 1)
          (bval-new 6 5 #t 'dec)))

(test-assert "<name>"
  (equal? (bv<<< (bv "5sd3") 2)
          (bval-new 12 5 #t 'dec)))

(test-assert "<name>"
  (equal? (bv<<< (bv "5sd3") 3)
          (bval-new 15 5 #t 'dec)))

(test-assert "<name>"
  (equal? (bv<<< (bv "5sd3") 4)
          (bval-new 15 5 #t 'dec)))

;; arithmetic shift left:
;; ------------------------------------------------------------


;; ------------------------------------------------------------
;; arithmetic shift right:

(test-assert "<name>"
  (equal? (bv>>> (bv "6u2b01.0010") 2)
          (bval-new 0.25 (cons 6 2) #f 'bin)))

(test-assert "<name>"
  (equal? (bv>>> (bv "6u2b00.0010") 0)
          (bval-new 0.125 (cons 6 2) #f 'bin)))

(test-assert "<name>"
  (equal? (bv>>> (bv "6u2b00.0010") 1)
          (bval-new 0.0625 (cons 6 2) #f 'bin)))

(test-assert "<name>"
  (equal? (bv>>> (bv "6u2b00.0010") 2)
          (bval-new 0.0 (cons 6 2) #f 'bin)))

(test-assert "<name>"
  (equal? (bv>>> (bv "6u2b00.0010") 3)
          (bval-new 0.0 (cons 6 2) #f 'bin)))

(test-assert "<name>"
  (equal? (bv>>> (bv "6s2b01.0010") 2)
          (bval-new 0.25 (cons 6 2) #t 'bin)))

(test-assert "<name>"
  (equal? (bv>>> (bv "6s2b00.0010") 0)
          (bval-new 0.125 (cons 6 2) #t 'bin)))

(test-assert "<name>"
  (equal? (bv>>> (bv "6s2b00.0010") 1)
          (bval-new 0.0625 (cons 6 2) #t 'bin)))

(test-assert "<name>"
  (equal? (bv>>> (bv "6s2b00.0010") 2)
          (bval-new 0.0 (cons 6 2) #t 'bin)))

(test-assert "<name>"
  (equal? (bv>>> (bv "6s2b00.0010") 3)
          (bval-new 0.0 (cons 6 2) #t 'bin)))

(test-assert "<name>"
  (equal? (bv>>> (bv "5ud13") 2)
          (bval-new 3 5 #f 'dec)))

(test-assert "<name>"
  (equal? (bv>>> (bv "5ud3") 0)
          (bval-new 3 5 #f 'dec)))

(test-assert "<name>"
  (equal? (bv>>> (bv "5ud3") 1)
          (bval-new 1 5 #f 'dec)))

(test-assert "<name>"
  (equal? (bv>>> (bv "5ud3") 2)
          (bval-new 0 5 #f 'dec)))

(test-assert "<name>"
  (equal? (bv>>> (bv "5ud3") 3)
          (bval-new 0 5 #f 'dec)))

(test-assert "<name>"
  (equal? (bv>>> (bv "5sd13") 2)
          (bval-new 3 5 #t 'dec)))

(test-assert "<name>"
  (equal? (bv>>> (bv "5sd3") 0)
          (bval-new 3 5 #t 'dec)))

(test-assert "<name>"
  (equal? (bv>>> (bv "5sd3") 1)
          (bval-new 1 5 #t 'dec)))

(test-assert "<name>"
  (equal? (bv>>> (bv "5sd3") 2)
          (bval-new 0 5 #t 'dec)))

(test-assert "<name>"
  (equal? (bv>>> (bv "5sd3") 3)
          (bval-new 0 5 #t 'dec)))

;; arithmetic shift left:
;; ------------------------------------------------------------


(test-end)
