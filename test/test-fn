#!/usr/bin/guile -s
!#

(use-modules (srfi srfi-64))
(use-modules (tuile pr))

(add-to-load-path "..")
(use-modules (tuile fn))
(use-modules (srfi srfi-9))

(use-modules ((srfi srfi-1) #:select (drop-right)))

(define-record-type tc
  (make-tc name func prefixes bodies reference)
  tc?
  (name      tc-name)
  (func      tc-func)
  (prefixes  tc-prefixes)
  (bodies    tc-bodies)
  (reference tc-reference)
  )


(define (getcwd-one-up)
  (string-join (drop-right (string-split (getcwd) #\/) 1) "/"))

(define tc-list
  (list

   (make-tc "fs-filename"
            fs-filename
            (list "/" "./" "../" "")
            (list "dii.txt" "foo/dii.txt" "foo/bar/dii.txt")
            "dii.txt")

   (make-tc "fs-basename"
            fs-basename
            (list "/" "./" "../" "")
            (list "dii.txt" "foo/dii.txt" "foo/bar/dii.txt")
            "dii")

   (make-tc "fs-extname"
            fs-extname
            (list "/" "./" "../" "")
            (list "dii.txt" "foo/dii.txt" "foo/bar/dii.txt"
                  "dii.extra.txt" "foo/dii.extra.txt" "foo/bar/dii.extra.txt")
            "txt")

   (make-tc "fs-fullext"
            fs-fullext
            (list "/" "./" "../" "")
            (list "dii.txt" "foo/dii.txt" "foo/bar/dii.txt")
            "txt")

   (make-tc "fs-fullext"
            fs-fullext
            (list "/" "./" "../" "")
            (list "dii.extra.txt" "foo/dii.extra.txt" "foo/bar/dii.extra.txt")
            "extra.txt")

   (make-tc "fs-dirname"
            fs-dirname
            (list "./" "")
            (list "dii.extra.txt" "foo/dii.extra.txt" "foo/bar/dii.extra.txt")
            (list "" "foo" "foo/bar"))

   (make-tc "fs-dirname"
            fs-dirname
            (list  "../")
            (list "dii.extra.txt" "foo/dii.extra.txt" "foo/bar/dii.extra.txt")
            (list ".." "../foo" "../foo/bar"))

   (make-tc "fs-dirname"
            fs-dirname
            (list  "/")
            (list "dii.extra.txt" "foo/dii.extra.txt" "foo/bar/dii.extra.txt")
            (list "/" "/foo" "/foo/bar"))

   (make-tc "fs-is-abs?"
            fs-is-abs?
            (list "./" "../" "")
            (list "dii.extra.txt" "foo/dii.extra.txt" "foo/bar/dii.extra.txt")
            (list #f #f #f))

   (make-tc "fs-is-abs?"
            fs-is-abs?
            (list "/")
            (list "dii.extra.txt" "foo/dii.extra.txt" "foo/bar/dii.extra.txt")
            (list #t #t #t))

   (make-tc "fs-is-rel?"
            fs-is-rel?
            (list "./" "../" "")
            (list "dii.extra.txt" "foo/dii.extra.txt" "foo/bar/dii.extra.txt")
            (list #t #t #t))

   (make-tc "fs-is-rel?"
            fs-is-rel?
            (list "/")
            (list "dii.extra.txt" "foo/dii.extra.txt" "foo/bar/dii.extra.txt")
            (list #f #f #f))

   (make-tc "fs-dir"
            fs-dir
            (list "./" "")
            (list "dii.extra.txt" "foo/dii.extra.txt" "foo/bar/dii.extra.txt")
            (map (lambda (i) (if (string=? i "") (getcwd)
                                 (string-append (getcwd) "/" i)))
                 (list "" "foo" "foo/bar")))

   (make-tc "fs-dir"
            fs-dir
            (list "../")
            (list "dii.extra.txt" "foo/dii.extra.txt" "foo/bar/dii.extra.txt")
            (list (string-append (getcwd-one-up) "")
                  (string-append (getcwd-one-up) "/" "foo")
                  (string-append (getcwd-one-up) "/" "foo/bar")))

   (make-tc "fs-dir"
            fs-dir
            (list "/")
            (list "dii.extra.txt" "foo/dii.extra.txt" "foo/bar/dii.extra.txt")
            (list "/" "/foo" "/foo/bar"))

   (make-tc "fs-path"
            fs-path
            (list "./" "")
            (list "dii.txt" "foo/dii.txt" "foo/bar/dii.txt")
            (map (lambda (i) (string-append (getcwd) "/" i))
                 (list "dii.txt" "foo/dii.txt" "foo/bar/dii.txt")))

   (make-tc "fs-path"
            fs-path
            (list "../")
            (list "dii.txt" "foo/dii.txt" "foo/bar/dii.txt")
            (map (lambda (i) (string-append (getcwd-one-up) "/" i))
                 (list "dii.txt" "foo/dii.txt" "foo/bar/dii.txt")))

   (make-tc "fs-path"
            fs-path
            (list "/")
            (list "dii.txt" "foo/dii.txt" "foo/bar/dii.txt")
            (list "/dii.txt" "/foo/dii.txt" "/foo/bar/dii.txt"))

   (make-tc "fs-reldir"
            fs-reldir
            (list "./" "")
            (list "dii.extra.txt" "foo/dii.extra.txt" "foo/bar/dii.extra.txt")
            (list "" "foo" "foo/bar"))

   (make-tc "fs-reldir"
            fs-reldir
            (list "../")
            (list "dii.extra.txt" "foo/dii.extra.txt" "foo/bar/dii.extra.txt")
            (list ".." "../foo" "../foo/bar"))

   (make-tc "fs-reldir"
            fs-reldir
            (list "/")
            (list "dii.extra.txt" "foo/dii.extra.txt" "foo/bar/dii.extra.txt")
            (list "/" "/foo" "/foo/bar"))

   (make-tc "fs-reldir-dotted"
            fs-reldir-dotted
            (list "./" "")
            (list "dii.extra.txt" "foo/dii.extra.txt" "foo/bar/dii.extra.txt")
            (list "." "./foo" "./foo/bar"))

   (make-tc "fs-reldir-dotted"
            fs-reldir-dotted
            (list "../")
            (list "dii.extra.txt" "foo/dii.extra.txt" "foo/bar/dii.extra.txt")
            (list ".." "../foo" "../foo/bar"))

   (make-tc "fs-reldir-dotted"
            fs-reldir-dotted
            (list "/")
            (list "dii.extra.txt" "foo/dii.extra.txt" "foo/bar/dii.extra.txt")
            (list "/" "/foo" "/foo/bar"))

   (make-tc "fs-relpath-dotted"
            fs-relpath-dotted
            (list "./" "")
            (list "dii.txt" "foo/dii.txt" "foo/bar/dii.txt")
            (list "./dii.txt" "./foo/dii.txt" "./foo/bar/dii.txt"))

   (make-tc "fs-relpath-dotted"
            fs-relpath-dotted
            (list "../")
            (list "dii.txt" "foo/dii.txt" "foo/bar/dii.txt")
            (list "../dii.txt" "../foo/dii.txt" "../foo/bar/dii.txt"))

   (make-tc "fs-relpath-dotted"
            fs-relpath-dotted
            (list "/")
            (list "dii.txt" "foo/dii.txt" "foo/bar/dii.txt")
            (list "/dii.txt" "/foo/dii.txt" "/foo/bar/dii.txt"))

   (make-tc "fn-is-abs?"
            (lambda (fs) (fn-is-abs? (fs->fn fs))) ; fn-is-abs?
            (list "/")
            (list "dii.txt" "foo/dii.txt" "foo/bar/dii.txt")
            #t)

   (make-tc "fn-is-abs?"
            (lambda (fs) (fn-is-abs? (fs->fn fs))) ; fn-is-abs?
            (list "./" "../" "")
            (list "dii.txt" "foo/dii.txt" "foo/bar/dii.txt")
            #f)

   (make-tc "fn-is-rel?"
            (lambda (fs) (fn-is-rel? (fs->fn fs))) ; fn-is-rel?
            (list "/")
            (list "dii.txt" "foo/dii.txt" "foo/bar/dii.txt")
            #f)

   (make-tc "fn-is-rel?"
            (lambda (fs) (fn-is-rel? (fs->fn fs))) ; fn-is-rel?
            (list "./" "../" "")
            (list "dii.txt" "foo/dii.txt" "foo/bar/dii.txt")
            #t)

   ;; Implicitly tested: fn-body, fn-file, fn-dir, fn->abs, fs->fn, fn->fs

   ))


;; Render reference to matching dimensions with bodies.
(define (expand-reference reference bodies)
  (if (list? reference)
      reference
      (make-list (length bodies) reference)))


(test-begin "fn")

;; Test all functions using tc-list.
(for-each (lambda (tc)
            (for-each (lambda (pre)
                        (for-each (lambda (body ref)
                                    (test-assert (tc-name tc)
                                      (let ((res ((tc-func tc) (string-append pre
                                                                              body))))
                                        ;; (pr "res: " res)
                                        ;; (pr "ref: " ref)
                                        (if (string? ref)
                                            (string=? ref res)
                                            (eq? ref res)))))
                                  (tc-bodies tc)
                                  (expand-reference (tc-reference tc)
                                                    (tc-bodies tc))))
                      (tc-prefixes tc)))
          tc-list)

(test-end)
