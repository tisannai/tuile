#!/usr/bin/guile -s
!#

(use-modules (srfi srfi-64))
(use-modules (srfi srfi-1))

(add-to-load-path "..")
(use-modules (tuile pr))
(use-modules (tuile utils))
(use-modules (tuile gulex))


(define gulex-token-table
  (list
   '("guile"                 GUILE)
   '("guilo"                 GUILO)
   '("\\("                   LPAR)
   '("\\[[^\\]]+\\]"         WIDTH)
   '("[a-b]?k"               LEFTCHAR1)
   '("[c-d]+n"               LEFTCHAR2)
   '("[e-f]*n"               LEFTCHAR3)
   '("(ab|cd)+"              PREFIX)
   '("[a-z][a-z_]+"          ID)
   '("[0-9]+"                NUM)
   '("[0-9]+(\\.[0-9]+)?"    FLOAT)
   '("[0-9]+'[bh][0-9A-Za-z]+" BASENUM)
   '("[ \t]+"                SPACE)
   '("."                     UNKNOWN)
   ))


;;(define test-lexer gulex-create-lexer-interp)
(define test-lexer gulex-create-lexer-fsm)

(define lexer-interp (test-lexer gulex-token-table))

(define (get-token-for string)
  (let* ((cs (char-stream-open string 'string))
         (ret (gulex-token-type (gulex-lexer-get-token lexer-interp cs)))
         )
    (char-stream-close cs)
    ret))

(define (get-string-for string)
  (let* ((cs (char-stream-open string 'string))
         (ret (gulex-token-value (gulex-lexer-get-token lexer-interp cs)))
         )
    (char-stream-close cs)
    ret))

(define st? string=?)

(test-begin "gulex")

(test-assert (eq? 'PREFIX (get-token-for "abcdabcd")))
(test-assert (st? "abcdabcd" (get-string-for "abcdabcd")))

(test-assert (eq? 'ID (get-token-for "guilebron")))
(test-assert (st? "guilebron" (get-string-for "guilebron")))

(test-assert (eq? 'GUILE (get-token-for "guile")))
(test-assert (st? "guile" (get-string-for "guile")))

(test-assert (eq? 'GUILO (get-token-for "guilo")))
(test-assert (st? "guilo" (get-string-for "guilo")))

(test-assert (eq? 'LPAR (get-token-for "(")))

(test-assert (eq? 'WIDTH (get-token-for "[22:0]")))
(test-assert (st? "[22:0]" (get-string-for "[22:0]")))

(test-assert (eq? 'LEFTCHAR1 (get-token-for "ak")))
(test-assert (eq? 'ID (get-token-for "kkk")))

(test-assert (eq? 'LEFTCHAR2 (get-token-for "cddcn")))
(test-assert (st? "cddcn" (get-string-for "cddcn")))

(test-assert (eq? 'LEFTCHAR3 (get-token-for "fefen")))
(test-assert (st? "fefen" (get-string-for "fefen")))

(test-assert (eq? 'ID (get-token-for "foo_bar")))
(test-assert (st? "foo_bar" (get-string-for "foo_bar")))

(test-assert (eq? 'NUM (get-token-for "1234")))
(test-assert (st? "1234" (get-string-for "1234")))

(test-assert (eq? 'FLOAT (get-token-for "1234.43")))
(test-assert (st? "1234.43" (get-string-for "1234.43")))

(test-assert (eq? 'BASENUM (get-token-for "1234'h4321")))
(test-assert (st? "1234'h4321" (get-string-for "1234'h4321")))

(test-assert (eq? 'NUM (get-token-for "1234'd4321")))
(test-assert (st? "1234" (get-string-for "1234'd4321")))

(test-assert (eq? 'SPACE (get-token-for "         ")))
(test-assert (st? "     " (get-string-for "     ")))

(test-assert (eq? 'UNKNOWN (get-token-for "\\?")))
(test-assert (st? "?" (get-string-for "?")))

(test-assert (eq? 'UNKNOWN (get-token-for "!")))
(test-assert (st? "!" (get-string-for "!")))

(test-assert (eq? 'UNKNOWN (get-token-for "\\*")))
(test-assert (st? "*" (get-string-for "*")))


(let (
      (ts (token-stream-open-with-lexer "  guilebron  guile guilo 32123 foo_bar diiduu abcdabcd aa !!!"
                                        'string
                                        (test-lexer gulex-token-table)
                                        #:skip-token-prefetch #t)))
  (let loop ((ref '(
                    (SPACE   . "  ")
                    (ID      . "guilebron")
                    (SPACE   . "  ")
                    (GUILE   . "guile")
                    (SPACE   . " ")
                    (GUILO   . "guilo")
                    (SPACE   . " ")
                    (NUM     . "32123")
                    (SPACE   . " ")
                    (ID      . "foo_bar")
                    (SPACE   . " ")
                    (ID      . "diiduu")
                    (SPACE   . " ")
                    (PREFIX  . "abcdabcd")
                    (SPACE   . " ")
                    (ID      . "aa")
                    (SPACE   . " ")
                    (UNKNOWN . "!")
                    (UNKNOWN . "!")
                    (UNKNOWN . "!")
                    )))
    (let ((ret (token-stream-get ts)))
      (cond ((eq? (gulex-token-type ret)
                  'eof)
             #t)

            (else
             ;; (pr "ret: " (datum->string ret))
             ;; (pr "ref: " (datum->string (car ref)))
             (test-assert (cdar ref) (equal? (cons (gulex-token-type ret)
                                                   (gulex-token-value ret))
                                             (car ref)))
             (loop (cdr ref)))))))

(test-end)
