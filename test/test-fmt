#!/usr/bin/guile -s
!#

(use-modules (srfi srfi-64))
(use-modules (tuile pr))

(add-to-load-path "..")
(use-modules (tuile fmt))

(define (test-string-match name code expected)
  (test-assert name (string=? code expected)))


(test-begin "fmt")

(test-string-match "trivial string"
                   (fmt "foo")
                   "foo")

(test-string-match "multiple string args"
                   (fmt "foo" "bar")
                   "foobar")

(test-string-match "list of strings"
                   (fmt '("foo" "bar"))
                   "foobar")

(test-string-match "left-align with space"
                   (fmt '(lal 5 "foo"))
                   "foo  ")

(test-string-match "right-align with dash"
                   (fmt '(ral (5 "-") "foo"))
                   "--foo")

(test-string-match "binary format"
                   (fmt '(bin 123))
                   "1111011")

(test-string-match "binary format with dash"
                   (fmt "0b" '(bin (10 "-") 123))
                   "0b---1111011")

(test-string-match "hexadecimal format"
                   (fmt '(hex 123))
                   "7b")

(test-string-match "hexadecimal format with dash"
                   (fmt "0h" '(hex (10 "-") 123))
                   "0h--------7b")

(test-string-match "octal format"
                   (fmt '(oct 123))
                   "173")

(test-string-match "octal format with dash"
                   (fmt "0o" '(oct (10 "-") 123))
                   "0o-------173")

(test-string-match "many left-aligns, multiple args"
                   (fmt '(lal 5 "foo" "bar" "dii"))
                   "foo  bar  dii  ")

(test-string-match "many left-aligns, list arg"
                   (fmt '(lal 5 ("foo" "bar" "dii")))
                   "fooba")

(test-string-match "many left-aligns with shorthand"
                   (fmt 'lal 5 "foo" "bar" "dii")
                   "foo  bar  dii  ")

(test-string-match "many left-aligns with many shorthands"
                   (fmt 'lal 5 "foo" "bar" "dii" 'lal 5 "foo" "bar" "dii")
                   "foo  bar  dii  foo  bar  dii  ")

(test-string-match "gap with multiple args"
                   (fmt '(gap (4 "+") "foo" "bar" "hii"))
                   "foo++++bar++++hii")

(test-string-match "gap with compose over right-align"
                   (fmt '(gap (2 "+") (ral (5 "-") "foo" "bar" "dii")))
                   "--foo++--bar++--dii")

(test-end)
